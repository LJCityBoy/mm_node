import VDistpicker from '/mall/js/v-distpicker.js'; //引入安装好的包
import Swiper from 'swiper';
import echarts from 'echarts';

var my_icon = {
	template: `<!-- 图标 -->
	<div class="my_icon" v-if="src.indexOf('<') !== -1" v-html="src" @click="chooseOption"></div>
	<img class="my_icon" v-else-if="src" :src="src" mode="mode" @click="chooseOption" />
	<div class="my_icon" v-else @click="chooseOption">
		<slot></slot>
	</div>`,
	props: {
		src: {
			type: String,
			default: ''
		},
		height: {
			type: String,
			default: ''
		},
		auto: {
			type: String,
			default: ''
		}
	},
	data() {
		var mode = '';
		if (this.auto) {
			mode = 'widthFix';
		}
		return {
			mode: mode
		};
	},
	methods: {
		chooseOption() {
			this.$emit('chooseOption')
		}
	}
};;

var my_header = {
	template: `<div class="my_header myFlex" :style="{'height':height}">
		<my_icon>
			<slot name="left"><i class="fa fa-arrow-left"></i></slot>
		</my_icon>
		<my_title>
			<slot name="center">{{label}}</slot>
		</my_title>
		<div class="text">
			<slot name="right">{{rightText}}</slot>
		</div>
	</div>`,
	props: {
		label: {
			type: String,
			default: '导航栏'
		},
		rightText: {
			type: String,
			default: '文字'
		},
		height: {
			type: String,
			default: '6.25rem'
		}
	}
};

var my_title = {
	template: `<div class="my_title">
		<slot></slot>
	</div>`
};

var my_news = {
	template: `<div class="my_news" :style="'height:' + height">
		<img :src="icon" v-if="icon.indexOf('fa-') === -1" />
		<i :class="'fa' + icon" v-else></i>
		<ul>
			<slot></slot>
		</ul>
	</div>`,
	props: {
		height: {
			type: String,
			default: '1.875rem'
		},
		icon: {
			type: String,
			default: 'fa-volume-up'
		}
	}
};;

var my_news_item = {
	template: `<li class="my_news_item" :style="'height:' + height">
		<slot>{{ label }}</slot>
	</li>`,
	props: {
		height: {
			type: String,
			default: '1.875rem'
		},
		label: {
			type: String,
			default: '1111123232'
		}
	}
};;

var my_footer = {
	template: `<div class="my_footer">
		<ul class="myFlex">
			<slot></slot>
		</ul>
	</div>`
};

var my_footer_item = {
	template: `<li class="my_footer_item">
		<router-link :to="{ path: path}">
			<slot><img :src="src" alt="" @click.stop="changeItem" /></slot>
		</router-link>
	</li>`,
	data() {
		return {};
	},
	props: {
		label: {
			type: String,
			default: '首页'
		},
		icon: {
			type: String,
			default: 'fa-home'
		},
		src: {
			type: String,
			default: ''
		},
		path: {
			type: String,
			default: ''
		}
	},
	mounted() {},
	methods: {
		changeItem(e) {
			this.$emit('changeItem', e);
		}
	}
};;

var my_list = {
	template: `<div class="my_content">
		<div class="my_list myFlex" :style="'height:' + height">
			<my_icon>
				<slot name="left"><i :class="'fa' + icon"></i></slot>
			</my_icon>
			<div class="detail">
				<slot name="center">{{ label }}</slot>
			</div>
			<div class="icon">
				<slot name="right"><i class="fa fa-angle-right"></i></slot>
			</div>
		</div>
	</div>`,
	name: 'my_list',
	props: {
		label: {
			type: String,
			default: '账户管理'
		},
		height: {
			type: String,
			default: '3.75rem'
		},
		icon: {
			type: String,
			default: 'fa-th-large'
		}
	}
};;

var my_nav = {
	template: `<div class="my_content">
		<div class="my_nav">
			<ul class="myFlex">
				<slot></slot>
			</ul>
		</div>
	</div>`
};

var my_nav_item = {
	template: `<li class="my_nav_item">
		<my_icon>
			<slot><i :class="'fa' + icon"></i></slot>
		</my_icon>
		<div class="title">
			<slot>{{label}}</slot>
		</div>
		<div class="number">
			<slot>{{number}}</slot>
		</div>
	</li>`,
	data() {
		return {

		}
	},
	props: {
		icon: {
			type: String,
			default: 'fa-fast-backward'
		},
		label: {
			type: String,
			default: '文章'
		},
		number: {
			type: Number,
			default: 10
		}
	},
	methods: {
		// change(){
		//   var num = (this.$attrs.value).replace(/[^0-9]/ig,"");
		//   console.log(num)
		// }
	}
};

var my_button = {
	template: `<div class="my_button" type="default" :disabled="disabled" :style="{ color: color, width: width, backgroundColor: backgroundColor }"
	 @click="change">{{ label }}</div>`,
	props: {
		label: {
			type: String,
			default: '默认按钮'
		},
		width: {
			type: String,
			default: '6.25rem'
		},
		backgroundColor: {
			type: String,
			default: 'rgb(255, 255, 255)'
		},
		color: {
			type: String,
			default: '#333'
		},
		disabled: {
			type: Boolean,
			default: false
		}
	},
	methods: {
		change() {
			this.$emit('submitValue')
		}
	}
};;

var my_toast = {
	template: `<div class="my_toast" :data-type="dataType" :style="{ width: minWidth, height: height, lineHeight: lineHeight, backgroundColor: backgroundColor, color: color }"
	 ref="refContent">
		{{ label }}
		<div class="model" v-show="model">
			<!-- 提示框 -->
			<div class="shadowAlert" v-show="toastAlert">
				<div class="shadow_title">{{ alertTitle }}</div>
				<div class="shadow_con">{{ alertCon }}</div>
				<div class="shadow_btn">
					<button @click.stop="closeAlert">{{ alertBtn }}</button>
				</div>
			</div>
			<!-- 确认框 -->
			<div class="shadowAlert shadowConfim" v-show="toastConfim">
				<div class="shadow_title">{{ confimTitle }}</div>
				<div class="shadow_con">{{ confimCon }}</div>
				<div class="shadow_btn myFlex">
					<button @click.stop="enterAlert" class="enterAlert">{{ confimEnter }}</button>
					<button @click.stop="cancleAlert" class="cancleAlert">{{ confimCancle }}</button>
				</div>
			</div>
			<!-- 对话框 -->
			<div class="shadowAlert shadowConfim shadowPrompt" v-show="toastPrompt">
				<div class="shadow_title">{{ promptTitle }}</div>
				<div class="shadow_con">{{ promptCon }}</div>
				<div class="shadow_prompt">
					<input v-model="message" placeholder="请输入...">
				</div>
				<div class="shadow_btn myFlex">
					<button @click.stop="enterAlertPrompt" class="enterAlert">{{ confimEnter }}</button>
					<button @click.stop="cancleAlertPrompt" class="cancleAlert">{{ confimCancle }}</button>
				</div>
			</div>
		</div>
	</div>`,
	data() {
		return {
			model: false,
			toastAlert: false, //提示框
			toastConfim: false, //确认框
			toastPrompt: false, //对话框
			toastType: '',
			message: ''
		};
	},
	props: {
		dataType: {
			type: String,
			default: 'confim'
		},
		callBackFun: {
			type: Function,
			default: function(option) {

			}
		},
		label: {
			type: String,
			default: '警告框'
		},
		minWidth: {
			type: String,
			default: '6.25rem'
		},
		height: {
			type: String,
			default: '2.5rem'
		},
		lineHeight: {
			type: String,
			default: '2.5rem'
		},
		backgroundColor: {
			type: String,
			default: 'rgb(255, 255, 255)'
		},
		color: {
			type: String,
			default: '#333'
		},
		alertTitle: {
			type: String,
			default: '提示'
		},
		alertCon: {
			type: String,
			default: '欢迎使用my-ui迎使用my-ui迎使用my-ui迎使用my-ui迎使用my-ui迎使用my-ui'
		},
		alertBtn: {
			type: String,
			default: '确定'
		},
		confimTitle: {
			type: String,
			default: '我是标题'
		},
		confimCon: {
			type: String,
			default: '你觉得my-ui好用吗你觉得my-ui好用吗你觉得my-ui好用吗你觉得my-ui好用吗？'
		},
		confimEnter: {
			type: String,
			default: '确定'
		},
		confimCancle: {
			type: String,
			default: '取消'
		},
		promptTitle: {
			type: String,
			default: '标题'
		},
		promptCon: {
			type: String,
			default: '请输入您对my-ui的评价'
		}
	},
	created() {
		var _this = this;
		this.$nextTick(function() {
			_this.currentDom = this.$refs.refContent;
			_this.toastType = this.$refs.refContent.dataset.type;
			if (_this.toastType == 'alert') {
				_this.currentDom.addEventListener('click', this.showAlert);
			} else if (_this.toastType == 'confim') {
				_this.currentDom.addEventListener('click', this.showConfim);
			} else {
				_this.currentDom.addEventListener('click', this.showPrompt);
			}
		});
	},
	methods: {
		// 弹出警告框
		showAlert() {
			this.model = true;
			this.toastAlert = true;
		},
		closeAlert() {
			this.model = false;
			this.toastAlert = false;
		},
		// 弹出确认框
		showConfim() {
			this.model = true;
			this.toastConfim = true;
		},
		enterAlert() {
			this.model = false;
			this.toastConfim = false;
			var _this = this;
			if (this.callBackFun) {
				this.callBackFun("yes")
			}
		},
		cancleAlert() {
			this.model = false;
			this.toastConfim = false;
			if (this.callBackFun) {
				this.callBackFun("no")
			}

		},
		// 弹出对话框
		showPrompt() {
			this.model = true;
			this.toastPrompt = true;
		},
		enterAlertPrompt() {
			this.model = false;
			this.toastPrompt = false;
			var _this = this;
			if (this.callBackFun) {
				this.callBackFun(this.message)
			}
		},
		cancleAlertPrompt() {
			this.model = false;
			this.toastPrompt = false;
			if (this.callBackFun) {
				this.callBackFun("")
			}
		},

	}
};;

var my_loading = {
	template: `<div class="my_loading">
		<i :class="'fa' + icon" v-show="icon !== ''"></i>
		<p>{{ message }}</p>
	</div>
	</div>`,
	data() {
		return {
			toastModel: false
		};
	},
	props: {
		message: {
			type: String,
			default: '加载中..'
		},
		icon: {
			type: String,
			default: ''
		}
	},
	methods: {
		showToast() {
			this.toastModel = true;
			var _this = this;
			setInterval(function() {
				_this.toastModel = false;
			}, 5000);
		}
	}
};;

var my_input = {
	template: `<div class="my_input">
		<input :type="type" placeholder="请输入..." :name="name" v-model="inputValue" :value="inputValue" :id="id" :checked="checked"
		 :style="{ width: width, backgroundColor: backgroundColor, color: color }" />
		<!-- <i
      :class="'fa' + icon"
      :style="{'position':position,'left':iconWidth,'top':top,'transform':transform}"
    ></i> -->
	</div>`,
	data() {
		return {
			inputValue: this.value,
			iconWidth: this.width + Number(this.left) + 'rem'
		};
	},
	// props的优先级 > data中的优先级 > menthods中的优先级
	props: {
		type: {
			type: String,
			default: 'text'
		},
		name: {
			type: String,
			default: 'name'
		},
		value: {
			type: String,
			default: ''
		},
		id: {
			type: String,
			default: 'name'
		},
		width: {
			type: String,
			default: '100%'
		},
		backgroundColor: {
			type: String,
			default: '#fff'
		},
		color: {
			type: String,
			default: '#333'
		},
		checked: {
			type: Boolean,
			default: true
		},
		icon: {
			type: String,
			default: 'fa-close'
		},
		position: {
			type: String,
			default: 'absolute'
		},
		top: {
			type: String,
			default: '50%'
		},
		transform: {
			type: String,
			default: 'translateY(-50%)'
		},
		left: {
			type: String,
			default: '100'
		}
	}
};;

var my_select = {
	template: `<div class="my_select">
		<select name="" id="" :style="{'width':width}" v-model="label">
			<slot></slot>
		</select>
	</div>`,
	props: {
		width: {
			type: String,
			default: "9.375rem"
		},
		label: {
			type: String,
			default: "请选择"
		}
	}
};

var my_select_item = {
	template: `<option :value="label" class="my_select_item">
		<slot>{{label}}</slot>
	</option>
	</div>`,
	props: {
		label: {
			type: String,
			default: "请选择"
		}
	}
};

var my_textarea = {
	template: `<div class="my_textarea">
		<textarea name="" id="" :rows="rows" :placeholder="placeholder" :style="{ width: width }" @blur="changeNumber"
		 :maxlength="number" :disabled="num == 0">
    </textarea>
		<span>0/{{ num }}</span>
	</div>`,
	props: {
		value: {
			type: String,
			default: ''
		},
		width: {
			type: String,
			default: '100%'
		},
		rows: {
			type: String,
			default: '3'
		},
		placeholder: {
			type: String,
			default: '请输入...'
		},
		number: {
			type: Number,
			default: 100
		}
	},
	methods: {
		changeNumber(e) {
			this.$emit('input', e.target.value)
		}
	},
	computed: {
		num() {
			return this.number - this.value.length;
		}
	}
};;

var my_checkbox = {
	template: `<div class="my_checkbox">
		<label>
			<input :type="type" :checked="checked" :style="{ width: width, height: height }" @change="$emit('change', $event.target.checked)" />
			<span>{{ label }}</span>
		</label>
	</div>`,
	data() {
		return {};
	},
	model: {
		prop: 'checked',
		event: 'change'
	},
	props: {
		checked: Boolean,
		type: {
			type: String,
			default: 'checkbox'
		},
		label: {
			type: String,
			default: '健身'
		},
		width: {
			type: String,
			default: '1.5rem'
		},
		height: {
			type: String,
			default: '1.5rem'
		}
	}
};;

var my_switch = {
	template: `<div class="my_switch">
		<input type="checkbox" class="checkbox_switch" name="" id="" v-model="switchStatus" :style="{'width':width,'height':height}">
	</div>`,
	data() {
		return {
			switchStatus: false
		}
	},
	props: {
		type: {
			type: String,
			default: 'checkbox'
		},
		label: {
			type: String,
			default: '健身'
		},
		width: {
			type: String,
			default: '4rem'
		},
		height: {
			type: String,
			default: '2rem'
		}
	}
};

var my_slide = {
	template: `<div class="my_slide myFlex">
		<div class="progress" :style="{ 'width': progresswidth + '%','height':progressHeight,'backgroundColor':progressbackgroundColor }">
			<div class="leftRess" :style="{'width': wh,'height':height,'backgroundColor':backgroundColor}">
			</div>
		</div>
		<div class="range">{{currentSlide + '%'}} </div>
	</div>`,
	data() {
		return {
			currentSlide: this.width
		};
	},
	props: {
		progresswidth: {
			type: Number,
			default: 100
		},
		progressHeight: {
			type: String,
			default: '0.625rem'
		},
		progressbackgroundColor: {
			type: String,
			default: '#DFDFDF'
		},
		width: {
			type: Number,
			default: 10
		},
		height: {
			type: String,
			default: '0.625rem'
		},
		backgroundColor: {
			type: String,
			default: '#ffe06e'
		}
	},
	computed: {
		wh() {
			var step = this.currentSlide;
			if (step < 0) {
				step = 0
			} else if (step > 100) {
				step = 100
			}
			return step + "%";
		}
	}
};;

var my_code = {
	template: `<div class="my_code">
		<label class="myFlex" :style="{ height: height }">
			<input type="text" :placeholder="placeholder" @blur="$emit('input', $event.target.value)" />
			<button @click="getCode" :disabled="disabled" :class="[disabled == true ? 'active' : '']" ref="refContent">{{ message }}</button>
		</label>
	</div>`,
	data() {
		return {
			message: this.btnMsg,
			disabled: false
		};
	},
	props: {
		value: {
			type: String,
			default: '4rem'
		},
		height: {
			type: String,
			default: '4rem'
		},
		placeholder: {
			type: String,
			default: '请输入验证码'
		},
		btnMsg: {
			type: String,
			default: '获取验证码'
		}
	},
	methods: {
		// 获取验证码
		getCode() {
			var time = 60;
			var _this = this;
			var timerId = setInterval(function() {
				if (time > 1) {
					time--;
					_this.message = '剩余' + time + 's';
					_this.disabled = true;
					_this.$refs.refContent.style.cursor = 'not-allowed';
				} else {
					_this.disabled = false;
					_this.message = '重新获取验证码';
					_this.$refs.refContent.style.cursor = 'pointer';
					clearInterval(timerId);
				}
			}, 1000);
		}
	}
};;

var my_search = {
	template: `<div class="my_search">
		<label for="" class="myFlex">
			<div class="inputBox">
				<slot><i :class="'fa fa-search' + icon"></i></slot>
				<input type="text" :placeholder="placeholder" v-model="value" @blur="getValue">
				<slot><i :class="'fa fa-close' + close" v-show="value != ''" @click="clearValue"></i></slot>
			</div>
			<slot>
				<div class="cancle">{{rightText}}</div>
			</slot>
		</label>
	</div>`,
	data() {
		return {
			value: ''
		}
	},
	props: {
		icon: {
			type: String,
			default: "fa-search"
		},
		close: {
			type: String,
			default: "fa-close"
		},
		placeholder: {
			type: String,
			default: "请搜索..."
		},
		rightText: {
			type: String,
			default: "搜索"
		}
	},
	methods: {
		getValue() {
			console.log(this.value)
		},
		clearValue() {
			this.value = ''
		}
	}
};

var my_tab_list = {
	template: `<div class="my_tab_list">
		<div class="list myClearfix">
			<div class="textBox myFl">
				<div class="title">{{title}}</div>
				<div class="info myFlex">
					<slot>
						<span class="time">{{time}}</span>
						<div class="grade">
							<span class="xingxing fa fa-heart-o"></span>
							<span class="number">{{number}}</span>
						</div>
						<span class="recommend">{{recommend}}</span>
					</slot>
				</div>
			</div>
			<div class="imgBox myFr">
				<div class="img"></div>
			</div>
		</div>
	</div>`,
	props: {
		title: {
			type: String,
			default: "差旅发快递师傅发电量是否多福多寿范德萨发明的顺丰快递发的发来的发的范德萨发生的方法是对方的时刻发快递师傅发送到"
		},
		time: {
			type: String,
			default: "2019-06-05"
		},
		recommend: {
			type: String,
			default: "推荐"
		},
		number: {
			type: Number,
			default: 0
		}
	}
};

var my_grade = {
	template: `<div class="my_grade">
		<div class="huixing myClearfix">
			<slot></slot>
		</div>
	</div>`
};

var my_grade_item = {
	template: `<div class="my_grade_item myFl">
		<slot><i v-for="(star, index) in stars" :key="index" :class="`
	fa $ {
		star.src
	}
	`" :style="{ color: color, fontSize: fontSize + 'px' }"
			 @click="changeGrade(index)"></i></slot>
	</div>`,
	data() {
		return {
			starNum: 0, //点亮星星的个数
			huixing: this.icon,
			hongxing: this.fillIcon,
			stars: [{
					src: this.icon,
					active: false
				},
				{
					src: this.icon,
					active: false
				},
				{
					src: this.icon,
					active: false
				},
				{
					src: this.icon,
					active: false
				},
				{
					src: this.icon,
					active: false
				}
			]
		};
	},
	props: {
		icon: {
			type: String,
			default: 'fa-heart-o'
		},
		fillIcon: {
			type: String,
			default: 'fa-heart'
		},
		color: {
			type: String,
			default: '#ff5a6a'
		},
		fontSize: {
			type: Number,
			default: 20
		}
	},

	methods: {
		//评分
		changeGrade(index) {
			var total = this.stars.length; //星星总数
			var idx = index + 1; //这代表选的第idx颗星-也代表应该显示的星星数量

			//进入if说明页面为初始状态
			if (this.starNum == 0) {
				this.starNum = idx;
				var _this = this;
				for (var i = 0; i < idx; i++) {
					this.stars[i].src = _this.hongxing;
					this.stars[i].active = true;
				}
			} else {
				//如果再次点击当前选中的星级-仅取消掉当前星级，保留之前的。
				if (idx == this.starNum) {
					var _this = this;
					for (var i = index; i < total; i++) {
						this.stars[i].src = _this.huixing;
						this.stars[i].active = false;
					}
				}
				//如果小于当前最高星级，则直接保留当前星级
				if (idx < this.starNum) {
					var _this = this;
					for (var i = idx; i < this.starNum; i++) {
						this.stars[i].src = _this.huixing;
						this.stars[i].active = false;
					}
				}
				//如果大于当前星级，则直接选到该星级
				if (idx > this.starNum) {
					var _this = this;
					for (var i = 0; i < idx; i++) {
						this.stars[i].src = _this.hongxing;
						this.stars[i].active = true;
					}
				}

				var count = 0; //计数器-统计当前有几颗星
				for (var i = 0; i < total; i++) {
					if (this.stars[i].active) {
						count++;
					}
				}
				this.starNum = count;
			}
		}
	}
};;

var my_stepper = {
	template: `<div class="my_stepper">
		<ul class="myClearfix">
			<li @click="cutNumber" ref="refContent"><span>-</span></li>
			<li><input type="text" v-model="inputVal" /></li>
			<li @click="addNumber"><span>+</span></li>
		</ul>
	</div>`,
	data() {
		return {
			inputVal: this.value
		};
	},
	props: {
		value: {
			type: Number,
			default: 1
		},
		step: {
			type: Number,
			default: 1
		}
	},
	mounted() {
		this.$refs.refContent.style.cursor = 'not-allowed';
	},
	// computed: {
	//   isAllowed: function() {
	//     return this.inputVal;
	//     console.log(this.inputVal);
	//   }
	// },
	methods: {
		isAllow() {
			var _this = this;
			if (this.inputVal == '1') {
				_this.$refs.refContent.style.cursor = 'not-allowed';
			} else {
				_this.$refs.refContent.style.cursor = 'pointer';
			}
		},
		cutNumber() {
			this.isAllow();
			if (this.inputVal > 1) {
				this.inputVal = Number(this.inputVal) - this.step;
			}
		},
		addNumber() {
			this.inputVal = Number(this.inputVal) + this.step;
		}
	}
};;

var my_upload = {
	template: `<div class="my_upload">
		<div class="upload" :style="{ width: width, height: height }">
			<i :class="'fa' + icon" :style="{ fontSize: fontSize }"></i>
			<img :src="imgSrc" alt="" />
			<input type="file" accept="image/*" @change="uploadImg" ref="refContent" />
			<my_loading message="最多只能上传4张图片" icon=" " v-show="imgLength > 5"></my_loading>
		</div>
	</div>`,
	data() {
		return {
			imgLength: this.length,
			imgSrc: ''
		};
	},
	props: {
		width: {
			type: String,
			default: '5rem'
		},
		height: {
			type: String,
			default: '5rem'
		},
		icon: {
			type: String,
			default: 'fa-plus'
		},
		fontSize: {
			type: String,
			default: '1rem'
		},
		length: {
			type: Number,
			default: 4
		}
	},
	methods: {
		uploadImg() {
			var inputDom = this.$refs.refContent;
			if (inputDom.files.length > 0) {
				var file = inputDom.files[0];
				console.log(file)
				// var length = this.imgLength + this.file.length;
				// for(var i= 0;i<this.file.length ;i++){
				//   var size = Math.floor(this.file[i].size / 1024);
				//   if(size > 5 *1024* 1024){
				//     alert(请上传小于5M的图片);
				//     return false;
				//   }
				// }
				this.imgSrc = this.getObjectURL(file)
			}

		},
		getObjectURL(file) {
			var url = null;
			if (window.createObjectURL != undefined) {
				// basic
				url = window.createObjectURL(file);
			} else if (window.URL != undefined) {
				// mozilla(firefox)
				url = window.URL.createObjectURL(file);
			} else if (window.webkitURL != undefined) {
				// webkit or chrome
				url = window.webkitURL.createObjectURL(file);
			}
			return url;
		}
	}
};;

var my_detail = {
	template: `<div class="my_detail">
		<div class="single myFlex">
			<div class="message">{{ message }}</div>
			<div class="declareBox">
				<div class="declare">{{ declare }}</div>
				<div class="time">{{ time }}</div>
			</div>
			<div class="money">+{{money}}</div>
		</div>
	</div>`,
	props: {
		message: {
			type: String,
			default: '挖'
		},
		declare: {
			type: String,
			default: '挖矿收益'
		},
		time: {
			type: String,
			default: '2019-06-05'
		},
		money: {
			type: Number,
			default: 12353
		}
	}
};;

var my_text = {
	template: `<div class="my_text">{{msg}}</div>`,
	props: {
		msg: {
			ype: String,
			default: '我是文本'
		}
	},
	mounted() {
		this.$emit('input', this.msg)
	}
};

var my_page = {
	template: `<div class="my_page">
		<slot></slot>
	</div>`
};

var my_head = {
	template: `<div class="my_head">
		<slot></slot>
	</div>`
};

var my_body = {
	template: `<div class="my_body">
		<slot></slot>
	</div>`
};

var my_foot = {
	template: `<div class="my_foot">
		<slot></slot>
	</div>`
};

var my_modal = {
	template: `<div class="my_modal">
		<slot></slot>
		<my_mask :style="{'backgroundColor':backgroundColor}"></my_mask>
	</div>`,
	props: {
		backgroundColor: {
			type: String,
			default: "rgba(102, 102, 102, 0.5)"
		},
	}
};

var my_mask = {
	template: `<div class="my_mask">
		<slot></slot>
	</div>`
};

var my_block = {
	template: `<div class="my_block">
		<slot></slot>
	</div>`
};

var my_warp = {
	template: `<div class="my_warp">
		<slot></slot>
	</div>`
};

var my_grid = {
	template: `<div :class="'my_grid' + 'col' + number">
		<slot></slot>
	</div>`,
	props: {
		number: {
			type: Number,
			default: 1
		}
	},
	created() {
		if (this.number) {
			if (this.number.indexOf('_') == -1) {
				this.number = '_' + this.number
			}
		}
	}
};

var my_table = {
	template: `<div class="my_table">
		<div class="my_thead">
			<slot></slot>
		</div>
		<div class="my_tbody">
			<slot>
				<tr>
					<th>
					<td></td>
					</th>
				</tr>
			</slot>
		</div>
		<div class="my_tfoot">
			<slot></slot>
		</div>
	</div>`
};

var my_datetime = {
	template: `<div class="my_datetime" @click="getTime">
		<vue-hash-calendar ref="picker" :model="model"></vue-hash-calendar>
	</div>`,
	props: {
		model: {
			type: String,
			default: 'dialog'
		}
	},
	mounted() {
		this.$refs.picker.show();
	},
	methods: {
		getTime() {
			this.$emit('change', '222');
		}
	}
};;


var my_address = {
	template: `<div class="my_address">
		<v-distpicker type="mobile" @selected="selected"></v-distpicker>
	</div>`,
	data() {
		return {};
	},
	components: {
		'v-distpicker': VDistpicker
	},
	methods: {
		// 省市区三级联动
		selected(data) {
			this.$emit('selected', data)
		}
	}
};;

import '/css/swiper.min.css';

var my_swiper_card = {
	template: `<div class="my_swiper_card swiper-container" :id="name">
		<div class="swiper-wrapper">
			<div class="swiper-slide" v-for="(item, index) in cardList" :key="index">
				<router-link :to="item[vm.url]">{{ item[vm.title] }}</router-link>
			</div>
		</div>
		<!-- 如果需要分页器 -->
		<div class="swiper-pagination"></div>
	</div>`,
	mounted() {
		if (this.cardList.length > 0) {
			var tag = '.my_swiper_card';
			if (this.name !== '') {
				tag = '#' + this.name;
			}
			var mySwiper = new Swiper(tag, {
				loop: true,
				pagination: {
					el: '.swiper-pagination'
				}
			});
		}
	},
	props: {
		name: {
			type: String,
			default: ''
		},
		cardList: {
			type: Array,
			default: function() {
				return [];
			}
		},
		vm: {
			type: Object,
			default: function() {
				return {
					url: 'url',
					title: 'title',
					img: 'img'
				};
			}
		}
	}
};;

import '/css/swiper.min.css';

var my_swiper_img = {
	template: `<div class="my_swiper_img swiper-container" :id="name">
		<div class="swiper-wrapper">
			<div class="swiper-slide" v-for="(item, index) in imglist" :key="index">
				<router-link :to="item[vm.url]">
					<my_icon :src="item[vm.img]"></my_icon>
				</router-link>
			</div>
		</div>
		<!-- 如果需要分页器 -->
		<div class="swiper-pagination"></div>
	</div>`,
	mounted() {
		if (this.imglist.length > 0) {
			var tag = '.my_swiper_img';
			if (this.name !== '') {
				tag = '#' + this.name;
			}
			var mySwiper = new Swiper(tag, {
				loop: true,
				pagination: {
					el: '.swiper-pagination'
				}
			});
		}
	},
	props: {
		name: {
			type: String,
			default: ''
		},
		imglist: {
			type: Array,
			default: function() {
				return [];
			}
		},
		vm: {
			type: Object,
			default: function() {
				return {
					url: 'url',
					title: 'title',
					img: 'img'
				};
			}
		}
	}
};;

var my_pager = {
	template: `<div class="my_pager" ref="pager">
		<div class="current">当前第{{ current }}页</div>
		<div class="pager_box myClearfix">
			<div :class="[{ disabled: current === 1 }, 'left','start']" @click="setCurrent(1)">首页</div>
			<div :class="[{ disabled: current === 1 }, 'left','prev']" @click="setCurrent(current - 1)">
				<slot><i class="fa fa-angle-left"></i></slot>
			</div>
			<div class="center">
				<div v-for="(item,index) in grouplist" :key="index" @click="setCurrent(item.val)" :class="['number', { active: current == item.val }]">{{ item.num }}</div>
			</div>
			<div :class="[{ disabled: current === page }, 'right','next']" @click="setCurrent(current + 1)">
				<slot><i class="fa fa-angle-right"></i></slot>
			</div>
			<div :class="[{ disabled: current === page }, 'right','end']" @click="setCurrent(page)">尾页</div>
		</div>
	</div>`,
	data() {
		return {
			current: this.currentPage
		};
	},
	props: {
		// 数据总条数
		total: {
			type: Number,
			default: 100
		},
		// 当前页数
		currentPage: {
			type: Number,
			default: 1
		},
		// 每页显示条数
		display: {
			type: Number,
			default: 3
		},
		// 分页条数
		pagegroup: {
			type: Number,
			default: 3,
			// 转换函数 ，在设置值之前转换
			coerce: function(res) {
				res = res > 0 ? res : 5;
				return res % 2 === 1 ? res : res + 1;
			}
		}
	},
	computed: {
		// 数据总页数(数据总条数/每页显示数据条数)
		page: function() {
			return Math.ceil(this.total / this.display);
		},
		// 获取分页页码
		grouplist: function() {
			var len = this.page, //数据总分页数
				temp = [],
				list = [],
				count = Math.floor(this.pagegroup / 2),
				center = this.current; //分页页码的中间数
			if (len <= this.pagegroup) {
				while (len--) {
					temp.push({
						num: this.page - len,
						val: this.page - len
					});
				}
				return temp;
			}
			while (len--) {
				temp.push(this.page - len);
			}
			var idx = temp.indexOf(center);
			idx < count && (center = center + count - idx);
			this.current > this.page - count && (center = this.page - count);
			temp = temp.splice(center - count - 1, this.pagegroup);
			do {
				var t = temp.shift();
				list.push({
					num: t,
					val: t
				});
			} while (temp.length);
			if (this.page > this.pagegroup) {
				this.current > count + 1 && list.unshift({
					num: '...',
					val: list[0].val - 1
				});
				this.current < this.page - count && list.push({
					num: '...',
					val: list[list.length - 1].val + 1
				});
			}
			return list;
		}
	},
	methods: {
		setCurrent(idx) {
			if (this.current != idx && idx > 0 && idx < this.page + 1) {
				this.current = idx;
				this.$emit('pagechange', this.current);
			}
		}
	}
};;

var my_transfer = {
	template: `<div class="my_transfer">
		<!-- 全部选项 -->
		<div class="option all">
			<div class="title myFlex">
				<my_checkbox type="checkbox" label="全部选项" v-model="leftAll" @change="leftAllChange" ref="allMark"></my_checkbox>
				<div class="number">
					{{ leftCount }}/
					<span>{{ leftOptions.length }}</span>
				</div>
			</div>
			<div class="info">
				<div class="my_transfer_item" v-if="leftOptions.length !== 0">
					<my_checkbox type="checkbox" v-for="(item, index) in leftOptions" @change="leftSingleChange" v-model="item.val"
					 :key="index + 'left'" :label="item.label"></my_checkbox>
				</div>
				<div class="noMessage" v-else>{{ noMessage }}</div>
			</div>
		</div>
		<!-- 中间穿梭按钮 -->
		<div class="marked_btn">
			<my_icon @chooseOption="goRight" :class="{ active: rightArrow }" :disabled="!rightArrow">
				<slot name="right"><i :class="'fa ' + rightIocn"></i></slot>
			</my_icon>
			<my_icon @chooseOption="goLeft" :class="{ active: leftArrow }" :disabled="!leftArrow">
				<slot name="left"><i :class="'fa ' + rightIocn"></i></slot>
			</my_icon>
		</div>
		<!-- 已选中选项 -->
		<div class="option marked">
			<div class="title myFlex">
				<my_checkbox type="checkbox" label="已选中选项" @change="rightAllChange" v-model="rightAll"></my_checkbox>
				<div class="number">
					{{ rightCount }}/
					<span>{{ rightOptions.length }}</span>
				</div>
			</div>
			<div class="info">
				<div class="my_transfer_item" v-if="rightOptions.length !== 0">
					<my_checkbox type="checkbox" v-for="(item, index) in rightOptions" @change="rightSingleChange" v-model="item.val"
					 :key="index + 'right'" :label="item.label"></my_checkbox>
				</div>
				<div class="noMessage" v-else>{{ noMessage }}</div>
			</div>
		</div>
	</div>`,
	data() {
		return {
			leftOptions: JSON.parse(JSON.stringify(this.options)), //全部选项
			rightOptions: [],
			noMessage: '暂无数据',
			leftCount: 0,
			rightCount: 0,
			leftAll: false,
			rightAll: false
		};
	},
	computed: {
		// rightArrow() {
		// 	return this.leftOptions.some(_item => _item.val);
		// },
		// leftArrow() {
		// 	return this.rightOptions.some(_item => _item.val);
		// }
	},
	props: {
		options: {
			type: Array,
			default: function() {
				return [{
						label: '游泳',
						val: false
					},
					{
						label: '健身',
						val: false
					},
					{
						label: '下棋',
						val: false
					},
					{
						label: '游戏',
						val: false
					}
				];
			}
		},
		rightIocn: {
			type: String,
			default: 'fa-angle-double-right'
		},
		leftIocn: {
			type: String,
			default: 'fa-angle-double-left'
		}
	},
	methods: {
		// 点击左侧全部所有的都选中
		leftAllChange(val) {
			// this.leftOptions.forEach(item => {
			// 	item.val = val ? true : false;
			// });
			// this.leftCount = (this.leftOptions.filter(item => item.val) || []).length;
		},
		// 点击右侧全部所有的都选中
		rightAllChange(val) {
			// this.rightOptions.forEach(item => {
			// 	item.val = val ? true : false;
			// });
			// this.rightCount = (this.rightOptions.filter(item => item.val) || []).length;
		},
		// 点击左侧单个选项
		leftSingleChange(val) {
			// this.leftCount = (this.leftOptions.filter(item => item.val) || []).length;
			// this.leftAll = this.leftCount === this.leftOptions.length;
		},
		rightSingleChange(val) {
			// this.rightCount = (this.rightOptions.filter(item => item.val) || []).length;
			// this.rightAll = this.rightCount === this.rightOptions.length;
		},
		// 到右边
		goRight() {
			// this.leftOptions.forEach(item => {
			// 	if (item.val) {
			// 		this.rightOptions.push({
			// 			label: item.label,
			// 			val: false
			// 		});
			// 	}
			// });
			// this.leftOptions = this.leftOptions.filter(item => !item.val);
			// this.leftCount = 0;
			// this.leftAll = false;
		},
		// 到左边
		goLeft() {
			// this.rightOptions.forEach(item => {
			// 	if (item.val) {
			// 		this.leftOptions.push({
			// 			label: item.label,
			// 			val: false
			// 		});
			// 	}
			// });
			// this.rightOptions = this.rightOptions.filter(item => !item.val);
			// this.rightCount = 0;
			// this.rightAll = false;
		}
	}
};;

var my_transfer_item = {
	template: `<div class="my_transfer_item" ref="childOption" @click="childCheck">
		<my_checkbox type="checkbox" :label="label"></my_checkbox>
	</div>`,
	props: {
		label: {
			type: String,
			default: '健身'
		}
	},
	methods: {
		childCheck() {
			var child = this.$refs.childOption.children;
			this.$emit('childCheck', child.length)
		}
	}
};

import pie from '/mall/js/pie.js'

var circleProgress = {
	template: `<div class="circleProgress">
		<div :id="id" :style="{ width: width, height: height }"></div>
		<span>{{value}}%</span>
	</div>`,
	props: {
		value: {
			type: Number,
			default: 0
		},
		width: {
			type: String,
			default: '3rem'
		},
		height: {
			type: String,
			default: '3rem'
		}
	},
	data() {
		var num = this.value;
		if (num < 0) {
			num = 0;
		} else if (num > 100) {
			num = 100;
		}
		var id = 'circleProgress' + Math.random(0, 1) * 1000;
		return {
			id: id,
			option: {
				series: [{
					type: 'pie',
					radius: ['78%', '100%'],
					labelLine: {
						normal: {
							position: 'inside', //隐藏引导线
							show: false //隐藏标识文字
						}
					},
					data: [{
						value: num,
						name: '已售'
					}, {
						value: 100 - num,
						name: '库存'
					}]
				}]
			}
		};
	},
	mounted() {
		// 基于准备好的dom，初始化echarts实例
		var myChart = echarts.init(document.getElementById(this.id), 'pie');
		myChart.setOption(this.option);
	}
};;

import "./components/my_ui/my_ui.css";

export default {
	install(Vue, option) {
		Vue.component('my_icon', my_icon)
		Vue.component('my_header', my_header)
		Vue.component('my_title', my_title)
		Vue.component('my_news', my_news)
		Vue.component('my_news_item', my_news_item)
		Vue.component('my_footer', my_footer)
		Vue.component('my_footer_item', my_footer_item)
		Vue.component('my_list', my_list)
		Vue.component('my_nav', my_nav)
		Vue.component('my_nav_item', my_nav_item)
		Vue.component('my_button', my_button)
		Vue.component('my_toast', my_toast)
		Vue.component('my_loading', my_loading)
		Vue.component('my_input', my_input)
		Vue.component('my_select', my_select)
		Vue.component('my_select_item', my_select_item)
		Vue.component('my_textarea', my_textarea)
		Vue.component('my_checkbox', my_checkbox)
		Vue.component('my_switch', my_switch)
		Vue.component('my_slide', my_slide)
		Vue.component('my_code', my_code)
		Vue.component('my_search', my_search)
		Vue.component('my_tab_list', my_tab_list)
		Vue.component('my_grade', my_grade)
		Vue.component('my_grade_item', my_grade_item)
		Vue.component('my_stepper', my_stepper)
		Vue.component('my_upload', my_upload)
		Vue.component('my_detail', my_detail)
		Vue.component('my_page', my_page)
		Vue.component('my_head', my_head)
		Vue.component('my_body', my_body)
		Vue.component('my_foot', my_foot)
		Vue.component('my_modal', my_modal)
		Vue.component('my_mask', my_mask)
		Vue.component('my_block', my_block)
		Vue.component('my_warp', my_warp)
		Vue.component('my_grid', my_grid)
		Vue.component('my_table', my_table)
		Vue.component('my_text', my_text)
		Vue.component('my_datetime', my_datetime)
		Vue.component('my_address', my_address)
		Vue.component('my_swiper_card', my_swiper_card)
		Vue.component('my_swiper_img', my_swiper_img)
		Vue.component('my_pager', my_pager)
		Vue.component('my_transfer', my_transfer)
		Vue.component('my_transfer_item', my_transfer_item)
		Vue.component('circleProgress', circleProgress)
	}
}
